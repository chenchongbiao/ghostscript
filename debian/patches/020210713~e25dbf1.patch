Description: tweak Leptonica/Tesseract memory allocators
 A typo was causing both Leptonica and Tesseract to just use malloc/free
 instead of properly calling via our allocator functions.

 All Leptonica allocations now go through gs allocations.
 
 Tesseract allocations remain going to malloc/free.
 This is hard to portably change,
 due to the C++ allocation calls (new/delete/new[]/delete[])
 being called during startup to initialise statics.
 These get called before any other allocator is setup,
 so we can't redirect them elsewhere.

 If an integrator wants to change these,
 they can alter tesseract_malloc and tesseract_free
 within the (currently disabled) #ifdef TESSERACT_CUSTOM_ALLOCATORS
 section of tessocr.cpp
 to call whatever functions they would like.
Origin: upstream, https://git.ghostscript.com/?p=ghostpdl.git;h=e25dbf1
Author: Robin Watts <Robin.Watts@artifex.com>
Last-Update: 2021-18-07
---
This patch header follows DEP-3: https://dep.debian.net/deps/dep3/
--- a/base/leptonica.mak
+++ b/base/leptonica.mak
@@ -4,7 +4,7 @@
 	$(I_)$(GLGENDIR)$(_I)
 
 LEPTCFLAGS_LOCAL=\
-	-DLEPTONICA_INTERCEPT_MALLOC=1\
+	-DLEPTONICA_INTERCEPT_ALLOC=1\
 	-DHAVE_LIBJPEG=0\
 	-DHAVE_LIBTIFF=0\
 	-DHAVE_LIBPNG=0\
--- a/base/ocr.mak
+++ b/base/ocr.mak
@@ -28,7 +28,7 @@
 # Tesseract veneer.
 $(GLGEN)tessocr.$(OBJ) : $(GLSRC)tessocr.cpp $(GLSRC)tessocr.h $(LIBOCR_MAK) \
 	$(gsmemory_h) $(gxiodev_h) $(stream_h) $(TESSDEPS)
-	$(TESSCXX) $(D_)LEPTONICA_INTERCEPT_MALLOC=1$(_D) $(I_)$(LEPTONICADIR)$(D)src$(_I) $(GLO_)tessocr.$(OBJ) $(C_) $(D_)TESSDATA="$(TESSDATA)"$(_D) $(GLSRC)tessocr.cpp
+	$(TESSCXX) $(D_)LEPTONICA_INTERCEPT_ALLOC=1$(_D) $(I_)$(LEPTONICADIR)$(D)src$(_I) $(GLO_)tessocr.$(OBJ) $(C_) $(D_)TESSDATA="$(TESSDATA)"$(_D) $(GLSRC)tessocr.cpp
 
 # 0 = No version.
 
--- a/base/tessocr.cpp
+++ b/base/tessocr.cpp
@@ -1,3 +1,46 @@
+/* Copyright (C) 2020-2021 Artifex Software, Inc.
+   All Rights Reserved.
+
+   This software is provided AS-IS with no warranty, either express or
+   implied.
+
+   This software is distributed under license and may not be copied,
+   modified or distributed except as expressly authorized under the terms
+   of the license contained in the file LICENSE in this distribution.
+
+   Refer to licensing information at http://www.artifex.com or contact
+   Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
+   CA 94945, U.S.A., +1(415)492-9861, for further information.
+*/
+
+/* This file is the veneer between GS and Leptonica/Tesseract.
+ *
+ * Leptonica's memory handling is intercepted via
+ * leptonica_{malloc,free,calloc,realloc} (though the last of these
+ * is not used) and forwarded to the GS memory handlers. Leptonica
+ * only makes calls when we're calling it, hence we use a leptonica_mem
+ * global to store the current memory pointer in. This will clearly not
+ * play nicely with multi-threaded use of Ghostscript, but that seems
+ * unlikely with OCR.
+ *
+ * Tesseract is trickier. For a start it uses new/delete/new[]/delete[]
+ * rather than malloc free. That's OK, cos we can intercept this - see
+ * the #ifdef TESSERACT_CUSTOM_ALLOCATOR section at the end of this file
+ * for how.
+ *
+ * The larger problem is that on startup, there is lots of 'static init'
+ * done in tesseract, which involves the system calling new. That happens
+ * before we have even entered main, so it's impossible to use any other
+ * allocator other than malloc.
+ *
+ * For now, we'll live with this; I believe that most of the 'bulk'
+ * allocations (pixmaps etc) are done via Leptonica. If we have an integrator
+ * that really needs to avoid malloc/free, then the section of code enclosed
+ * in #ifdef TESSERACT_CUSTOM_ALLOCATOR at the end of this file can be used,
+ * and tesseract_malloc/tesseract_free can be changed as required.
+ */
+
+
 #include "tesseract/baseapi.h"
 
 extern "C"
@@ -36,43 +79,44 @@
 } wrapped_api;
 
 
-void *leptonica_malloc(size_t blocksize)
+static gs_memory_t *leptonica_mem;
+
+void *leptonica_malloc(size_t size)
 {
-    void *ret = malloc(blocksize);
+    void *ret = gs_alloc_bytes(leptonica_mem, size, "leptonica_malloc");
 #ifdef DEBUG_ALLOCS
-    printf("%d LEPTONICA_MALLOC %d -> %p\n", event++, (int)blocksize, ret);
+    printf("%d LEPTONICA_MALLOC(%p) %d -> %p\n", event++, leptonica_mem, (int)size, ret);
     fflush(stdout);
 #endif
     return ret;
 }
 
-void *leptonica_calloc(size_t numelm, size_t elemsize)
+void leptonica_free(void *ptr)
 {
-    void *ret = calloc(numelm, elemsize);
 #ifdef DEBUG_ALLOCS
-    printf("%d LEPTONICA_CALLOC %d,%d -> %p\n", event++, (int)numelm, (int)elemsize, ret);
+    printf("%d LEPTONICA_FREE(%p) %p\n", event++, leptonica_mem, ptr);
     fflush(stdout);
 #endif
-    return ret;
+    gs_free_object(leptonica_mem, ptr, "leptonica_free");
 }
 
-void *leptonica_realloc(void *ptr, size_t blocksize)
+void *leptonica_calloc(size_t numelm, size_t elemsize)
 {
-    void *ret = realloc(ptr, blocksize);
+    void *ret = leptonica_malloc(numelm * elemsize);
+
+    if (ret)
+        memset(ret, 0, numelm * elemsize);
 #ifdef DEBUG_ALLOCS
-    printf("%d LEPTONICA_REALLOC %p,%d -> %p\n", event++, ptr, (int)blocksize, ret);
+    printf("%d LEPTONICA_CALLOC %d,%d -> %p\n", event++, (int)numelm, (int)elemsize, ret);
     fflush(stdout);
 #endif
     return ret;
 }
 
-void leptonica_free(void *ptr)
+void *leptonica_realloc(void *ptr, size_t blocksize)
 {
-#ifdef DEBUG_ALLOCS
-    printf("%d LEPTONICA_FREE %p\n", event++, ptr);
-    fflush(stdout);
-#endif
-    free(ptr);
+    /* Never called in our usage. */
+    return NULL;
 }
 
 /* Convert from gs format bitmaps to leptonica format bitmaps. */
@@ -98,27 +142,6 @@
     return w + extra*4;
 }
 
-static gs_memory_t *leptonica_mem;
-
-static void *my_leptonica_malloc(size_t size)
-{
-    void *ret = gs_alloc_bytes(leptonica_mem, size, "leptonica_malloc");
-#ifdef DEBUG_ALLOCS
-    printf("%d MY_LEPTONICA_MALLOC(%p) %d -> %p\n", event++, leptonica_mem, (int)size, ret);
-    fflush(stdout);
-#endif
-    return ret;
-}
-
-static void my_leptonica_free(void *ptr)
-{
-#ifdef DEBUG_ALLOCS
-    printf("%d MY_LEPTONICA_FREE(%p) %p\n", event++, leptonica_mem, ptr);
-    fflush(stdout);
-#endif
-    gs_free_object(leptonica_mem, ptr, "leptonica_free");
-}
-
 static bool
 load_file(const char* filename, std::vector<char>* data) {
   bool result = false;
@@ -276,7 +299,7 @@
         return gs_error_VMerror;
 
     leptonica_mem = mem;
-    setPixMemoryManager(my_leptonica_malloc, my_leptonica_free);
+    setPixMemoryManager(leptonica_malloc, leptonica_free);
 
     wrapped->mem = mem;
     wrapped->api = new tesseract::TessBaseAPI();
@@ -669,25 +692,54 @@
 
 };
 
+/* The following code is disabled by default. If enabled, nothing
+ * should change, except integrators can tweak tesseract_malloc
+ * and tesseract_free as required to avoid calling the normal
+ * system malloc/free. */
+#ifdef TESSERACT_CUSTOM_ALLOCATOR
+
+static void *tesseract_malloc(size_t blocksize)
+{
+    void *ret;
+
+    ret = malloc(blocksize);
+#ifdef DEBUG_ALLOCS
+    printf("%d LEPTONICA_MALLOC %d -> %p\n", event++, (int)blocksize, ret);
+    fflush(stdout);
+#endif
+    return ret;
+}
+
+static void tesseract_free(void *ptr)
+{
+#ifdef DEBUG_ALLOCS
+    printf("%d LEPTONICA_FREE %p\n", event++, ptr);
+    fflush(stdout);
+#endif
+    free(ptr);
+}
+
 /* Currently tesseract is the only C++ lib we have.
  * We may need to revisit this if this changes.
  */
 void *operator new(size_t size)
 {
-    return leptonica_malloc(size);
+    return tesseract_malloc(size);
 }
 
 void operator_delete(void *ptr)
 {
-    leptonica_free(ptr);
+    tesseract_free(ptr);
 }
 
 void *operator new[](size_t size)
 {
-    return leptonica_malloc(size);
+    return tesseract_malloc(size);
 }
 
 void operator delete[](void *ptr)
 {
-    leptonica_free(ptr);
+    tesseract_free(ptr);
 }
+
+#endif
